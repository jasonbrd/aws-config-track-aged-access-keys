AWSTemplateFormatVersion: 2010-09-09
Description: Create an SNS Topic to publish results for AWS Config Rule Access-Key-Rotation
Parameters:
  MultiAccountMethod:
    Type: String
    Description: Use AWS Organizations for child accounts or provide an account list?
    AllowedValues:
      - "AWS Organizations"
      - "Account List"
  OrganizationID:
    Type: String
    Description: The AWS Organization ID to allow 
  TargetAccounts:
    Type: CommaDelimitedList
    Description: The list of target AWS Account IDs, comma-separated
  GracePeriod:
    Type: Number
    Description: The number of days an access key is in grace period to suppress alerts.

Conditions:
  OrgManaged: !Equals [!Ref MultiAccountMethod, 'AWS Organizations']

Resources:
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: >-
        Access Key rotation rule non-compliance
      TopicName: AccessKeyRotationTopic
      KmsMasterKeyId: !Ref KMSKey

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: SnsTopicPublishPolicy
          Action: sns:Publish
          Effect: Allow
          Resource: 
          - !Join
            - ''
            - - 'arn:aws:sns:'
              - !Ref 'AWS::Region'
              - ":"
              - !Ref 'AWS::AccountId'
              - ':AccessKeyRotationTopic'          
          Principal:
            AWS: !If [OrgManaged, '*', !Ref TargetAccounts]
          Condition:
            !If
              - OrgManaged
              - 
                StringEquals:
                  aws:PrincipalOrgID: !Ref OrganizationID
              - !Ref "AWS::NoValue"
      Topics:
      - !Ref SNSTopic

  KMSKey:
    Type: 'AWS::KMS::Key'
    Properties: 
      Description: Key for Access Key Rotation SNS Topic
      EnableKeyRotation: true
      KeyPolicy: 
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join ['', [ 'arn:aws:iam::', !Ref 'AWS::AccountId', ':root'] ]
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !If [OrgManaged, '*', !Ref TargetAccounts]
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey*'
            Resource: '*'
            Condition:
              !If
                - OrgManaged
                - 
                  StringEquals:
                    aws:PrincipalOrgID: !Ref OrganizationID
                - !Ref 'AWS::NoValue'
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT      

  KMSKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties: 
      AliasName: alias/accessKeys/sns
      TargetKeyId: !Ref KMSKey

  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: resource_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - 
          AttributeName: resource_id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TimeToLiveSpecification:
        AttributeName: access_key_ttl
        Enabled: true

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Architectures: 
        - arm64
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          from datetime import datetime, timedelta

          def lambda_handler(event, context):
              # Setup environment
              grace_period = int(os.environ['GRACE_PERIOD_DAYS'])
              sns_topic_arn = os.environ['SNS_TOPIC_ARN']
              db_table = os.environ['DB_TABLE']
              sqs_queue = os.environ['SQS_QUEUE']
              
              # Get values from incoming SQS message
              message = event['Records'][0]
              message_body = json.loads(message['body'])
              resource_id = message_body['resource_id']
              account_id = message_body['account_id']
              resource_name = message_body['resource_name']

              # Connect to DynamoDB
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table(db_table)
              
              # Query the DynamoDB table for the record with the primary key of the hash string
              response = table.get_item(Key={'resource_id': resource_id})
              item = response.get('Item')
              
              # If the item does not exist in the DynamoDB table, add item
              if item is None:
                  now = datetime.utcnow()
                  expiry_time = int((now + timedelta(days=(grace_period+30))).timestamp())
                  table.put_item(
                      Item={
                          'resource_id': resource_id,
                          'key_grace_period': grace_period,
                          'access_key_ttl': expiry_time,
                          'account_id': account_id,
                          'resource_name': resource_name
                      }
                  )
                  
                  # Connect to SNS and send message
                  sns = boto3.client('sns')
                  
                  sns.publish(
                      TopicArn=sns_topic_arn,
                      Message=f'Access Key for user {resource_name} in account {account_id} now in grace period.'
                  )
              else:
                  if item.get('key_grace_period') > 0:
                      item['key_grace_period'] -= 1
                      
                      table.update_item(
                          Key={'resource_id': resource_id},
                          UpdateExpression='set key_grace_period = :val',
                          ExpressionAttributeValues={':val': item['key_grace_period']}
                      )
                  elif item.get('key_grace_period') == 0:
                      # Connect to SNS & send violation notice
                      sns = boto3.client('sns')

                      sns.publish(
                          TopicArn=sns_topic_arn,
                          Message=f'Access Key for user {resource_name} in account {account_id} is now in violation of policy.'
                      )
              
                  # Remove message from SQS as it has been processed
                  sqs = boto3.client('sqs')
                  sqs.delete_message(
                      QueueUrl=sqs_queue,
                      ReceiptHandle=message['receiptHandle']
                  )

              # Return from function
              return {
                  'statusCode': 200,
                  'body': ''
              }
      Description: Access Key Aging Handler
      Environment:
        Variables:
          GRACE_PERIOD_DAYS: !Ref GracePeriod
          SNS_TOPIC_ARN: !GetAtt SNSTopic.TopicArn
          DB_TABLE: !Ref DynamoDBTable
          SQS_QUEUE: !Ref SQSQueue
      Handler: index.lambda_handler
      MemorySize: 256
      PackageType: Zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9

  LambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "arn:aws:logs:*:*:*"
            - Effect: Allow
              Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              Resource: !GetAtt DynamoDBTable.Arn
            - Effect: Allow
              Action:
              - sns:Publish
              Resource: !GetAtt SNSTopic.TopicArn
              Condition:
                StringEquals:
                  aws:SourceKmsKeyId: !Ref KMSKey
            - Effect: Allow
              Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              Resource: !GetAtt SQSQueue.Arn

  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue.Arn
      FunctionName: !Ref LambdaFunction

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties: 
      SqsManagedSseEnabled: true

  SQSPolicy: 
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - !Ref SQSQueue
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - "SQS:SendMessage" 
            Effect: "Allow"
            Resource: !GetAtt SQSQueue.Arn
            Principal:
              AWS: !If [OrgManaged, '*', !Ref TargetAccounts]
            Condition:
              !If
                - OrgManaged
                - 
                  StringEquals:
                    aws:PrincipalOrgID: !Ref OrganizationID
                - !Ref 'AWS::NoValue'
          -
            Action: 
              - "SQS:ReceiveMessage"
              - "SQS:DeleteMessage"
            Effect: Allow
            Resource: !GetAtt SQSQueue.Arn
            Principal: 
              AWS:
                - !Ref 'AWS::AccountId'
      
Outputs:
  SNSTopicOutput:
    Description: The SNS Topic that was created
    Value: !Ref SNSTopic
  KMSKeyOutput:
    Description: The KMS key that was created
    Value: !GetAtt KMSKey.Arn
  SQSQueueOutput:
    Description: The SQS queue URL that was created
    Value: !Ref SQSQueue
